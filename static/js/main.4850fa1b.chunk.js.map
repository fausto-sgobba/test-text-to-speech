{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","multipleWords","setMultipleWords","singleWord","setSingleWord","active","setActive","queue","setQueue","voices","setVoices","currentVoiceIndex","setCurrentVoiceIndex","iOS","test","navigator","userAgent","advanceQueue","useCallback","remaining","console","log","speak","textToSpeak","synthesis","window","speechSynthesis","utterance","SpeechSynthesisUtterance","addEventListener","rate","pitch","volume","voice","lang","cancel","inputOnChange","evt","target","id","value","split","index","Object","assign","Number","buttonClick","preventDefault","action","arrWithItem","splice","arrWithoutItem","useEffect","length","getVoices","onvoiceschanged","newVoiceIndex","findIndex","v","includes","className","required","onChange","map","name","type","placeholder","onClick","w","i","activeClass","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4850fa1b.chunk.js","sourcesContent":["import './App.css';\nimport { useCallback, useEffect, useState } from 'react';\n\nfunction App() {\n  const [multipleWords, setMultipleWords] = useState([\n    'Prosegui 100 metri fino alla rotonda',\n    'Prendi la prima uscita a destra',\n    'Tieni la destra',\n    'Destinazione raggiunta',\n  ]);\n  const [singleWord, setSingleWord] = useState(\n    'Tra 2 chilometri svolta a sinistra',\n  );\n  const [active, setActive] = useState();\n  const [queue, setQueue] = useState([]);\n  const [voices, setVoices] = useState([]);\n  const [currentVoiceIndex, setCurrentVoiceIndex] = useState(0);\n\n  const iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n\n  const startMultipleWords = () => {\n    if (iOS) speak(); // try to force iPad to enable text to speech\n    setActive('multiple');\n    setQueue(multipleWords);\n  };\n\n  const startSingleWord = () => {\n    if (iOS) speak(); // try to force iPad to enable text to speech\n    setActive('single');\n    setQueue([singleWord]);\n  };\n\n  const advanceQueue = useCallback(() => {\n    // eslint-disable-next-line no-unused-vars\n    const [removed, ...remaining] = queue;\n    console.log(\n      'ðŸš€ ~ file: App.js ~ line 36 ~ advanceQueue ~ queue',\n      queue,\n      remaining,\n    );\n    setQueue(remaining);\n  }, [queue]);\n\n  const speak = useCallback(() => {\n    console.log('speak');\n    const textToSpeak = queue[0];\n    // const lang = 'it-IT';\n    const volume = 1;\n    const rate = 1;\n    const pitch = 1;\n    let synthesis = window.speechSynthesis;\n    let utterance = new SpeechSynthesisUtterance(textToSpeak);\n    // FIXME: on safari sometimes this instance gets destroyed before actyally invoking the callback\n    utterance.addEventListener('end', () => {\n      console.log('end reached');\n      advanceQueue();\n    });\n\n    // utterance.lang = lang;\n    utterance.rate = rate;\n    utterance.pitch = pitch;\n    utterance.volume = volume;\n    if (voices) {\n      const voice = voices[currentVoiceIndex];\n      utterance.lang = voice.lang;\n      utterance.voice = voice;\n    }\n    synthesis.cancel();\n\n    return synthesis.speak(utterance);\n  }, [queue, advanceQueue, currentVoiceIndex, voices]);\n\n  const inputOnChange = (evt) => {\n    console.log(evt.target.id);\n    switch (evt.target.id) {\n      case 'singleWord':\n        setSingleWord(evt.target.value);\n        break;\n      default:\n        // eslint-disable-next-line no-unused-vars\n        const [_, index] = evt.target.id.split('-');\n        setMultipleWords(\n          Object.assign([], multipleWords, {\n            [Number(index)]: evt.target.value,\n          }),\n        );\n        break;\n    }\n  };\n\n  const buttonClick = (evt) => {\n    evt.preventDefault();\n    console.log(evt);\n    // eslint-disable-next-line no-unused-vars\n    const [action, index] = evt.target.id.split('-');\n    switch (action) {\n      case 'add':\n        const arrWithItem = [...multipleWords];\n        arrWithItem.splice(Number(index) + 1, 0, 'New Word');\n        setMultipleWords(arrWithItem);\n        break;\n      case 'remove':\n        const arrWithoutItem = [...multipleWords];\n        arrWithoutItem.splice(Number(index), 1);\n        setMultipleWords(arrWithoutItem);\n        break;\n\n      default:\n        break;\n    }\n    return false;\n  };\n\n  const languageOnChange = (evt) => {\n    setCurrentVoiceIndex(evt.target.value);\n  };\n\n  useEffect(() => {\n    if (queue.length <= 0) {\n      setActive();\n      return;\n    }\n    speak(queue[0]);\n  }, [queue, speak]);\n\n  useEffect(() => {\n    setVoices(window.speechSynthesis.getVoices());\n    speechSynthesis.onvoiceschanged = () => {\n      setVoices(window.speechSynthesis.getVoices());\n    };\n  }, []);\n\n  useEffect(() => {\n    console.log('voices', voices);\n    if (voices.length) {\n      const newVoiceIndex = voices.findIndex((v) => v.lang.includes('it'));\n      setCurrentVoiceIndex(newVoiceIndex);\n    }\n  }, [voices]);\n\n  return (\n    <div className='App container'>\n      <h1>Test Text to speech</h1>\n      <h2 className='mt-4'>Interaction tests</h2>\n      <div className='card'>\n        <div className='card-body'>\n          <div>\n            <div className='form-group'>\n              <select\n                className='custom-select'\n                required\n                onChange={languageOnChange}\n                value={currentVoiceIndex}\n              >\n                {voices &&\n                  voices.map((voice, index) => (\n                    <option\n                      value={index}\n                      key={index}\n                      // selected={index === currentVoiceIndex}\n                    >{`${voice.name} (${voice.lang})`}</option>\n                  ))}\n              </select>\n            </div>\n          </div>\n          <div className='row'>\n            <div className='col-sm'>\n              <div>\n                <label>Word to speak</label>\n                <form>\n                  <div className='form-group'>\n                    <input\n                      type='text'\n                      className={`form-control ${\n                        active === 'single' ? 'is-valid' : ''\n                      }`}\n                      id='singleWord'\n                      placeholder='Enter the word / phrase'\n                      value={singleWord}\n                      onChange={inputOnChange}\n                    />\n                  </div>\n                </form>\n              </div>\n              <div>\n                <button className='btn btn-primary' onClick={startSingleWord}>\n                  Speak\n                </button>\n              </div>\n            </div>\n            <div className='col-sm'>\n              <div>\n                <form>\n                  <label>Words to speak</label>\n                  {multipleWords.map((w, i) => {\n                    const activeClass =\n                      active === 'multiple' && queue[0] === w ? 'is-valid' : '';\n                    return (\n                      <div\n                        key={`remove-${i}`}\n                        className='form-group inline-buttons'\n                      >\n                        <input\n                          type='text'\n                          className={`form-control ${activeClass}`}\n                          id={`word-${i}`}\n                          placeholder='Enter the word / phrase'\n                          value={w}\n                          onChange={inputOnChange}\n                        />\n                        <button\n                          className='btn btn-outline-success'\n                          id={`add-${i}`}\n                          value={w}\n                          onClick={buttonClick}\n                        >\n                          +\n                        </button>\n                        <button\n                          className='btn btn-outline-danger'\n                          id={`remove-${i}`}\n                          value={w}\n                          onClick={buttonClick}\n                        >\n                          -\n                        </button>\n                      </div>\n                    );\n                  })}\n                </form>\n              </div>\n              <div>\n                <button\n                  className='btn btn-primary'\n                  onClick={startMultipleWords}\n                >\n                  Speak\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}